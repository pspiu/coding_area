Topic : Majority Element
Link: https://leetcode.com/problems/majority-element/
Description: Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.

Example 1:

Input: [3,2,3]
Output: 3
Example 2:

Input: [2,2,1,1,1,2,2]
Output: 2

Solution 1: Using sorting
class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        int majorIndex=(int)Math.floor(nums.length/2);
         return nums[majorIndex];
    }
}

Solution 2: HashMap:
class Solution {
    public int majorityElement(int[] nums) {
        Map<Integer,Integer> map = new HashMap();
        for(int ele: nums)
        {
            if(!map.containsKey(ele))
                map.putIfAbsent(ele,1);
            else
            {
            int a = map.get(ele);
            map.put(ele,++a); 
            }
        } 
    int majorIndex = (int)Math.floor(nums.length/2);
        System.out.println(majorIndex);
    for(Map.Entry<Integer,Integer> entry: map.entrySet())
    {
        if(entry.getValue()>majorIndex)
        { 
            //System.out.println(entry.getKey()+" "+entry.getValue());
         return entry.getKey();
        }
    }
    return -1;
    }
}

Solution 3: Randomization:
class Solution {
    private int randRange(Random rand, int min, int max) {
        return rand.nextInt(max - min) + min;
    }

    private int countOccurences(int[] nums, int num) {
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == num) {
                count++;
            }
        }
        return count;
    }

    public int majorityElement(int[] nums) {
        Random rand = new Random();

        int majorityCount = nums.length/2;

        while (true) {
            int candidate = nums[randRange(rand, 0, nums.length)];
            if (countOccurences(nums, candidate) > majorityCount) {
                return candidate;
            }
        }
    }
}

Solution 4: Divide and Conquer
class Solution {
    private int countInRange(int[] nums, int num, int lo, int hi) {
        int count = 0;
        for (int i = lo; i <= hi; i++) {
            if (nums[i] == num) {
                count++;
            }
        }
        return count;
    }

    private int majorityElementRec(int[] nums, int lo, int hi) {
        // base case; the only element in an array of size 1 is the majority
        // element.
        if (lo == hi) {
            return nums[lo];
        }

        // recurse on left and right halves of this slice.
        int mid = (hi-lo)/2 + lo;
        int left = majorityElementRec(nums, lo, mid);
        int right = majorityElementRec(nums, mid+1, hi);

        // if the two halves agree on the majority element, return it.
        if (left == right) {
            return left;
        }

        // otherwise, count each element and return the "winner".
        int leftCount = countInRange(nums, left, lo, hi);
        int rightCount = countInRange(nums, right, lo, hi);

        return leftCount > rightCount ? left : right;
    }

    public int majorityElement(int[] nums) {
        return majorityElementRec(nums, 0, nums.length-1);
    }
}
