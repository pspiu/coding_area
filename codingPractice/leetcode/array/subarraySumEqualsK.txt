Topic:  Subarray Sum Equals K
Link: https://leetcode.com/problems/subarray-sum-equals-k/
Description: Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.
Example 1:
Input:nums = [1,1,1], k = 2
Output: 2
Note:
The length of the array is in range [1, 20,000].
The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].


public class Solution {
   //Way 1
    public int subarraySum(int[] nums, int k) {
        int count = 0, sum=0;
      HashMap<Integer,Integer> map = new HashMap<>();
        map.put(0,1);
        for(int ele : nums)
        {
         sum+=ele;
            if(map.containsKey(sum-k))
                count+=map.get(sum-k);
           /* option 1
           if(!map.containsKey(sum))
           {
            map.put(sum,1);   
           }
            else
            {
                int temp =map.get(sum);
                map.put(sum,temp+1);
                
            }
            */
         // option 2
            map.put(sum, map.getOrDefault(sum, 0) + 1);
        }
        return count;
    }

//Way 2
    public int subarraySum1(int[] nums, int k) {
        int count = 0;
        for (int start = 0; start < nums.length; start++) {
            int sum=0;
            for (int end = start; end < nums.length; end++) {
                sum+=nums[end];
                if (sum == k)
                    count++;
            }
        }
        return count;
    }
}

