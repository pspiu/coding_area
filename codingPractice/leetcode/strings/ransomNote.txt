Topic: Ransom Note
Link: https://leetcode.com/problems/ransom-note/
Description: Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.

Each letter in the magazine string can only be used once in your ransom note.

Note:
You may assume that both strings contain only lowercase letters.

canConstruct("a", "b") -> false
canConstruct("aa", "ab") -> false
canConstruct("aa", "aab") -> true

Solution 1:
class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
    HashMap<Character,Integer> magazine_map=new HashMap();
        for(char ele: magazine.toCharArray())
        {
            if(!magazine_map.containsKey(ele))
            magazine_map.putIfAbsent(ele,1);
            else
            magazine_map.compute(ele, (key, val)->  val + 1); 
        }
        
        //magazine_map.forEach((key,val)->System.out.println(key+" "+val));
        
        for(char ele:ransomNote.toCharArray())
        {
         if(magazine_map.containsKey(ele) && magazine_map.get(ele)>0)
         {
             magazine_map.compute(ele,(key,val)->val-1);
         }
          else
              return false;
        }
        return true;
    }
}
Solution 2:

class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
    HashMap<Character,Integer> magazine_map=new HashMap();
        for(char ele: magazine.toCharArray())
        {
            if(!magazine_map.containsKey(ele))
            magazine_map.putIfAbsent(ele,1);
            else
            magazine_map.compute(ele, (key, val)->  val + 1); 
        }
        
        //magazine_map.forEach((key,val)->System.out.println(key+" "+val));
        
        for(char ele:ransomNote.toCharArray())
        {
         if(magazine_map.containsKey(ele) && magazine_map.get(ele)>0)
         {
             magazine_map.compute(ele,(key,val)->val-1);
         }
          else
              return false;
        }
        return true;
    }
}

Solution 3:
class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
        int[] cnt = new int[128];
        for (char c : magazine.toCharArray())
            ++cnt[c];
        for (char c : ransomNote.toCharArray())
            if (--cnt[c] < 0) return false;
        return true;
    }
}

Solution 3': (improved of Solution 3)
class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
      int[] countOfChars = new int[26];
        for (char ele : magazine.toCharArray())
            ++countOfChars[ele-'a'];
        for (char ele : ransomNote.toCharArray())
            if (--countOfChars[ele-'a'] < 0) 
                return false;
        return true;
    }
}


Solution 4:
class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
      //add magazine to StringBuilder
        StringBuilder sb = new StringBuilder();
        sb.append(magazine);        
        int length = ransomNote.length(), count = 0;        
        //iterate through ramsomNote String and delete occurence of its char from StringBuilder
        for(int i=0;i<length;i++){
            // "" req at the end o.w. error will come : char cannot be converted to String
            int index = sb.indexOf(ransomNote.charAt(i)+"");
            if(index != -1){
                //index is inclusive whereas index+1 is exclusive
                sb.delete(index, index+1);
            }
            else return false;
        }
        return true;
    }
}
