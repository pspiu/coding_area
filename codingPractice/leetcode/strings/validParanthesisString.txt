Link: https://leetcode.com/problems/valid-parenthesis-string

Topic :  Valid Parenthesis String

Description: Given a string containing only three types of characters: '(', ')' and '*', 
write a function to check whether this string is valid. We define the validity of a string by these rules:
Any left parenthesis '(' must have a corresponding right parenthesis ')'.
Any right parenthesis ')' must have a corresponding left parenthesis '('.
Left parenthesis '(' must go before the corresponding right parenthesis ')'.
'*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string.
An empty string is also valid.

class Solution {
    private Stack<Integer> beginBracketArr = new Stack<Integer>();
    private Stack<Integer> starArray = new Stack<Integer>();

    public boolean checkValidString(String s) {
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                beginBracketArr.push(i);
            } else if (s.charAt(i) == ')') {
                if (!beginBracketArr.isEmpty()) {
                    beginBracketArr.pop();
                } else if(!starArray.isEmpty()) {
                    starArray.pop();
                } else {
                    return false;
                }
            } else if (s.charAt(i) == '*') {
                starArray.push(i);
            }
        }
        while(!beginBracketArr.isEmpty() && !starArray.isEmpty()) {
            if (beginBracketArr.peek() < starArray.peek()) {
                beginBracketArr.pop(); starArray.pop();
            }
            //w/o return false, time limit exceed
            else return false;
        }

        return beginBracketArr.isEmpty();
    }

    public boolean checkValidString1(String s) {
       int lo = 0, hi = 0;
       for (char c: s.toCharArray()) {
           lo += c == '(' ? 1 : -1;
           hi += c != ')' ? 1 : -1;
           if (hi < 0) break;
           lo = Math.max(lo, 0);
       }
       return lo == 0;
    }
}