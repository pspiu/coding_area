Link: https://leetcode.com/problems/middle-of-the-linked-list
Topic: Middle of the Linked List
Description: Given a non-empty, singly linked list with head node head, return a middle node of linked list.
If there are two middle nodes, return the second middle node.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode slow,fast=head;
        slow=fast=head;
        while(fast.next!=null && fast.next.next!=null)
        {
            slow=slow.next;fast=fast.next.next;
                        
        }
        
        if(fast.next!=null)
            return slow.next;
        else return slow;
    }

    public ListNode middleNode1(ListNode head) {
        ListNode[] A = new ListNode[100];
        int t = 0;
        while (head.next != null) {
            A[t++] = head;
            head = head.next;
        }
        return A[t / 2];
    }

}