Topic: Walls and Gates
Link: https://leetcode.com/problems/walls-and-gates/
Description: 
You are given a m x n 2D grid initialized with these three possible values.
-1 - A wall or an obstacle.
0 - A gate.
INF - Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than2147483647.
Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.
For example, given the 2D grid:
INF  -1  0  INF
INF INF INF  -1
INF  -1 INF  -1
  0  -1 INF INF
After running your function, the 2D grid should be:
  3  -1   0   1
  2   2   1  -1
  1  -1   2  -1
  0  -1   3   4

import java.io.*; 
import java.util.*; 
class Solution {
    final static int INF =2147483647;
    public static void wallsAndGates(int[][] rooms)
   {
       for(int i=0;i<rooms.length;i++)
       {
           for(int j=0;j<rooms[0].length;j++)
           {
               if(rooms[i][j]==0)
               computeDist(rooms,i,j,0);
           }
       }
       
       System.out.println("Upated dist to gates");
       for(int[] one_dim : rooms)
          System.out.println(Arrays.toString(one_dim));
       System.out.println();
          }
   
   public static void computeDist(int[][] rooms, int i, int j, int count)
   {
       if(i<0 || j<0 || i>=rooms.length || j>=rooms[0].length || rooms[i][j]<count)
       return;
       rooms[i][j]=count;
       computeDist(rooms,i+1,j,count+1);
       computeDist(rooms,i-1,j,count+1);
       computeDist(rooms,i,j+1,count+1);
       computeDist(rooms,i,j-1,count+1);
   }
   
   
     public static void main (String[] args) {
         int[][] rooms= {{INF, -1, 0,INF},{INF,INF, INF, -1},{INF,  -1, INF,  -1},{0,-1,INF,INF}};
         System.out.println("Provided Room details:");
        for(int[] one_dim : rooms)
        System.out.println(Arrays.toString(one_dim));
        System.out.println();
        wallsAndGates(rooms);
    }
}